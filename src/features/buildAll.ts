import path from 'node:path';
import fs from 'fs-extra';
import { execa } from 'execa';

const CONFIG_DIR_NAME = '.frontforge';
const FRONTS_CONFIG_FILE_NAME = 'frontForgeFronts.json';

/**
 * @interface FrontConfigEntry
 * Define la estructura de una entrada en el archivo de configuraci√≥n `.frontforge/frontForgeFronts.json`.
 * Cada entrada representa un micro-frontend y especifica su ubicaci√≥n.
 * @property {string} [path] - Ruta relativa al micro-frontend desde la carpeta 'fronts/'. Usado si `projectFullPath` no est√° presente. (Considerar deprecaci√≥n)
 * @property {string} projectFullPath - Ruta relativa a la ra√≠z del repositorio del micro-frontend.
 */
interface FrontConfigEntry {
  path?: string; // Considerar deprecaci√≥n en favor de solo projectFullPath
  projectFullPath: string; // Hacer este campo obligatorio
}

/**
 * Compila todos los micro-frontends definidos en el archivo `.frontforge/frontForgeFronts.json`.
 * Lee la configuraci√≥n, determina la ruta de cada micro-frontend y ejecuta `npm run build` en su directorio.
 * Muestra logs del proceso de compilaci√≥n.
 *
 * @async
 * @function buildAll
 * @returns {Promise<void>} Promesa que se resuelve cuando todos los builds han terminado (o fallado).
 * @throws {Error} Si no se encuentra o no se puede leer el archivo de configuraci√≥n.
 */
export async function buildAll(): Promise<void> {
  const repoRoot = process.cwd();
  const frontforgeConfigDir = path.join(repoRoot, CONFIG_DIR_NAME);
  const frontsConfigPath = path.join(frontforgeConfigDir, FRONTS_CONFIG_FILE_NAME);
  
  console.log(`üìÑ Leyendo configuraci√≥n desde: ${frontsConfigPath}`);

  let fronts: FrontConfigEntry[];
  try {
    // Asegura que el archivo exista antes de intentar leerlo
    if (!(await fs.pathExists(frontsConfigPath))) {
      throw new Error(`Archivo de configuraci√≥n no encontrado: ${frontsConfigPath}`);
    }
    fronts = await fs.readJson(frontsConfigPath);
    if (!Array.isArray(fronts)) {
        throw new Error(`El contenido de ${frontsConfigPath} no es un array v√°lido.`);
    }
  } catch (error: any) {
    console.error(`‚ùå Error al leer o parsear ${frontsConfigPath}:`, error.message);
    process.exit(1); // Termina si hay error de configuraci√≥n
  }

  console.log(`üîé Encontrados ${fronts.length} micro-frontends para compilar.`);

  for (const [index, frontConfig] of fronts.entries()) {
    let projectDir: string;

    // Determinar la ruta del proyecto, dando prioridad a projectFullPath
    if (frontConfig.projectFullPath) {
      projectDir = path.resolve(repoRoot, frontConfig.projectFullPath);
    } else if (frontConfig.path) { // Mantener por retrocompatibilidad, pero marcar para deprecaci√≥n
      console.warn(`‚ö†Ô∏è  Entrada ${index + 1}: La propiedad 'path' est√° obsoleta, usa 'projectFullPath' en su lugar.`);
      projectDir = path.join(repoRoot, 'fronts', frontConfig.path);
    } else {
      console.warn(`‚ö†Ô∏è  Skipping entrada ${index + 1}: Falta 'projectFullPath' en la configuraci√≥n.`);
      continue; 
    }

    // Verificar si el directorio existe
    if (!(await fs.pathExists(projectDir))) {
      console.warn(`‚ö†Ô∏è  Skipping, directorio no encontrado: ${projectDir}`);
      continue;
    }

    const relativeProjectPath = path.relative(repoRoot, projectDir);
    console.log(`\nüî® (${index + 1}/${fronts.length}) Compilando ${relativeProjectPath}...`);

    try {
      // Ejecutar npm run build en el directorio del proyecto
      await execa('npm', ['run', 'build'], { cwd: projectDir, stdio: 'inherit' });
      console.log(`‚úÖ Compilaci√≥n exitosa para ${relativeProjectPath}`);
    } catch (error: any) {
      console.error(`‚ùå Error al compilar ${relativeProjectPath}:`, error.message);
    }
  }
  console.log('\n‚ú® Proceso de compilaci√≥n completado.');
}
