import path from 'node:path';
import fs from 'fs-extra'; // Necesario para pathExists
import { createDirectoryStructure } from '../tasks/init/createDirectoryStructure';
import { copyBaseTemplates } from '../tasks/init/copyBaseTemplates';
import { ensureRootFiles } from '../tasks/init/ensureRootFiles';
import { installDependencies } from '../tasks/init/installDependencies';

/**
 * @interface InitProjectOptions
 * Opciones para la funci√≥n `initProject`.
 * @property {boolean} [installDeps=true] - Si es true, ejecuta `npm install` despu√©s de crear los archivos.
 * @property {boolean} [forceInstall=false] - Si es true, fuerza la instalaci√≥n de dependencias incluso si node_modules existe.
 */
interface InitProjectOptions {
  installDeps?: boolean;
  forceInstall?: boolean; // A√±adida opci√≥n para forzar instalaci√≥n
}

/**
 * Inicializa la estructura base de un proyecto backend Express compatible con `frontforge`.
 * Orquesta una serie de tareas: crear carpetas, copiar plantillas base, asegurar archivos ra√≠z
 * e instalar dependencias.
 *
 * @async
 * @function initProject
 * @param {InitProjectOptions} options - Opciones para controlar el proceso de inicializaci√≥n.
 * @returns {Promise<void>} Promesa que se resuelve cuando la inicializaci√≥n ha finalizado.
 * @throws {Error} Si ocurre un error durante alguna de las tareas cr√≠ticas.
 */
export async function initProject(options: InitProjectOptions = {}): Promise<void> {
  const { installDeps = true, forceInstall = false } = options;
  const projectRoot = process.cwd(); // Asume que se ejecuta en la ra√≠z del nuevo proyecto backend

  console.log(`üöÄ Inicializando estructura de backend en: ${projectRoot}`);

  try {
    // --- 1. Crear Estructura de Carpetas ---
    console.log('\n[Paso 1/4] Creando estructura de directorios...');
    await createDirectoryStructure(projectRoot);

    // --- 2. Copiar Archivos Base desde Plantillas ---
    console.log('\n[Paso 2/4] Copiando archivos base desde plantillas...');
    await copyBaseTemplates(projectRoot);

    // --- 3. Asegurar Archivos de Configuraci√≥n Ra√≠z ---
    console.log('\n[Paso 3/4] Creando/Asegurando archivos de configuraci√≥n ra√≠z...');
    await ensureRootFiles(projectRoot);

    // --- 4. Instalar Dependencias ---
    if (installDeps) {
      // Verificar si package.json existe antes de intentar instalar
      if (await fs.pathExists(path.join(projectRoot, 'package.json'))) {
        console.log('\n[Paso 4/4] Instalando dependencias...');
        await installDependencies({ projectRoot, forceInstall });
      } else {
        console.warn('\n[Paso 4/4] ‚ö†Ô∏è  No se encontr√≥ package.json. Omitiendo instalaci√≥n de dependencias.');
      }
    } else {
      console.log('\n[Paso 4/4] Omitiendo instalaci√≥n de dependencias (seg√∫n opci√≥n --skip-install). Ejecuta "npm install" manualmente.');
    }

    // --- Finalizaci√≥n ---
    console.log('\n‚ú® Proyecto backend inicializado exitosamente!');
    console.log(`   Directorio: ${projectRoot}`);
    console.log('   -> Configura tu archivo .env (especialmente JWT_SECRET).');
    console.log('   -> Ejecuta "npm run dev" para iniciar el servidor en modo desarrollo.');
    console.log('   -> Empieza a a√±adir tus rutas en src/routes/ y controladores/servicios en src/controllers/ y src/services/.');

  } catch (error: any) {
    console.error('\n‚ùå Ocurri√≥ un error durante la inicializaci√≥n del proyecto:', error.message);
    // Considerar loguear error.stack para m√°s detalles en depuraci√≥n
    // console.error(error.stack);
    process.exit(1); // Terminar el proceso en caso de error cr√≠tico
  }
}